---
- name: Create List of nodes to be added into Cluster
  set_fact: nodelist={%for host in groups['master']%}"{{hostvars[host].ansible_default_ipv4.address}}"{% if not loop.last %},{% endif %}{% endfor %}

- debug: msg=[{{nodelist}}]
# Downloading the Elastic File in deb
- name: Download the Elastic File
  become: true
  get_url:
    url: https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-{{ elastic_version }}-amd64.deb
    dest: /tmp
    mode: 0440
  when: elastic_flavor is defined and elastic_flavor == "pgdg"

- name: Installing the Elastic File
  become: true
  apt:
    deb: /tmp/elasticsearch-{{ elastic_version }}-amd64.deb

- name: Update apt-get repo and cache
  become: true
  apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

- name: Create data directory
  become: true
  file:
    path: "/{{ data_path }}/elasticsearch"
    state: directory

- name: Create log directory
  become: true
  file:
    path: "/{{ log_path }}/elasticsearch"
    state: directory

- name: Changing the elastic config file
  become: true
  template:
    src: elasticsearch_security.yml.j2
    dest: '/etc/elasticsearch/elasticsearch.yml'

- name: Adding parameter to config
  become: true
  lineinfile:
    path: /etc/security/limits.conf
    line: 'elasticsearch soft memlock unlimited
           elasticsearch hard memlock unlimited'

- name: Adding parameter to config
  become: true
  lineinfile:
    path: /usr/lib/systemd/system/elasticsearch.service
    line: 'LimitMEMLOCK=infinity'
    insertafter: LimitFSIZE=infinity
  
- include_tasks: kibana.yml

- name: Stopping the elastic service
  become: true
  command: "systemctl stop elasticsearch"

- name: Stopping the elastic service
  become: true
  command: "systemctl stop kibana"

- name: Changing the elastic config file
  become: true
  template:
    src: elasticsearch_security.yml.j2
    dest: '/etc/elasticsearch/elasticsearch.yml'

- name: Create data directory
  become: true
  file:
    path: "/etc/elasticsearch/certs"
    state: directory

- name: Creating Certificates
  become: true
  command: ./bin/elasticsearch-certutil cert --pass password --out elastic-stack-ca.p12
  args:
    chdir: /usr/share/elasticsearch

- name: Creating Password in a file
  become: true
  copy:
    dest: "/tmp/password.tmp"
    content: |
      password

- name: Checking xpack keystore is avaiable
  become: true
  shell: ./bin/elasticsearch-keystore list | grep xpack.security.transport.ssl.keystore.secure_password
  args:
    chdir: /usr/share/elasticsearch
  register: xpack_keystore

- debug: msg={{xpack_keystore['failed']}}

- name: Checking xpack keystore is avaiable
  become: true
  shell: ./bin/elasticsearch-keystore list | grep xpack.security.transport.ssl.truststore.secure_password
  args:
    chdir: /usr/share/elasticsearch
  register: xpack_truststore

- name: Storing Password in keyStore
  become: true
  shell: sudo cat /tmp/password.tmp | ./bin/elasticsearch-keystore add --stdin xpack.security.transport.ssl.keystore.secure_password 
  args:
    chdir: /usr/share/elasticsearch
  when: xpack_keystore['failed']== true

- name: Storing Password in Trust Store
  become: true
  shell: sudo cat /tmp/password.tmp | ./bin/elasticsearch-keystore add --stdin xpack.security.transport.ssl.truststore.secure_password
  args:
    chdir: /usr/share/elasticsearch
  when: xpack_truststore['failed']== true

- name: Moving Cert file
  become: true
  command: cp /usr/share/elasticsearch/elastic-stack-ca.p12 /etc/elasticsearch/certs/

- name: Change permissions
  become: true
  command: chmod 644 /etc/elasticsearch/certs/elastic-stack-ca.p12

- name: Checking bootstrap keystore is avaiable
  become: true
  shell: ./bin/elasticsearch-keystore list | grep bootstrap.password
  args:
    chdir: /usr/share/elasticsearch
  register: bootstrap_password

- name: Setting bootstrap password for elastic user
  become: true
  shell: echo "demopassword" | sudo ./bin/elasticsearch-keystore add -x "bootstrap.password"
  args:
    chdir: /usr/share/elasticsearch
  when: bootstrap_password['failed']== true

- name: Enabling the elastic service
  become: true
  command: "systemctl enable elasticsearch"

- name: Starting the elastic service
  become: true
  command: "systemctl start elasticsearch"

- name: Status the elastic service
  become: true
  command: "systemctl status elasticsearch"

- name: Restarting the elastic service
  become: true
  command: "systemctl restart elasticsearch"

- name: Enabling the Kibana service
  become: true
  command: "systemctl enable kibana"

- name: Starting the Kibana service
  become: true
  command: "systemctl start kibana"

- name: Status the Kibana service
  become: true
  command: "systemctl status kibana"

- name: Setting elastic password for elastic user
  become: true
  shell: curl -u elastic:password -XPOST "http://{{source}}:9200/_security/user/elastic/_password" -H'Content-Type:application/json' -d'{"password":"password"}'

- name: Setting Kibana password for elastic user
  become: true
  shell: curl -u elastic:password -XPOST "http://{{source}}:9200/_security/user/kibana/_password" -H'Content-Type:application/json' -d'{"password":"password"}'

- name: Setting Logstash password for elastic user
  become: true
  shell: curl -u elastic:password -XPOST "http://{{source}}:9200/_security/user/logstash_system/_password" -H'Content-Type:application/json' -d'{"password":"password"}'
  
- name: Setting Beats password for elastic user
  become: true
  shell: curl -u elastic:password -XPOST "http://{{source}}:9200/_security/user/beats_system/_password" -H'Content-Type:application/json' -d'{"password":"password"}'

- name: Setting Remote monitoring password for elastic user
  become: true
  shell: curl -u elastic:password -XPOST "http://{{source}}:9200/_security/user/remote_monitoring_user/_password" -H'Content-Type:application/json' -d'{"password":"password"}'

- name: Authorizing kibana with elastic username and password
  become: true
  lineinfile:
    path: /etc/kibana/kibana.yml
    line: 'elasticsearch.username: "kibana_system"'

# - name: Creating Kibana keystore
#   become: true
#   shell: echo "y" | ./bin/kibana-keystore -x create
#   args:
#     chdir: /usr/share/kibana
# - name: Checking kibana keystore is avaiable
#   become: true
#   shell: "./bin/kibana-keystore list | grep elasticsearch.password"
#   args:
#     chdir: /usr/share/kibana
#   register: kibana_password

# - name: Checking kibana keystore is avaiable
#   become: true
#   shell: ./bin/kibana-keystore list | grep elasticsearch.password
#   args:
#     chdir: /usr/share/kibana
#   register: kibana_password

- name: Setting kibana password for kibana_system
  become: true
  shell: echo "password" | sudo ./bin/kibana-keystore add -x "elasticsearch.password"
  args:
    chdir: /usr/share/kibana
  when: kibana_password['failed']== true

- name: restart the Kibana service
  become: true
  command: "systemctl restart kibana"